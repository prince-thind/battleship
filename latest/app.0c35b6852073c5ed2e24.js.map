{"version":3,"file":"app.0c35b6852073c5ed2e24.js","mappings":"oFAAAA,OAAOC,MAAM,WAEQ,IADDC,SAASC,cAAc,gBACRC,iBAAiB,kBACrCC,SAAQC,GAAKA,EAAIC,UAAUC,IAAI,gBAC9C,C,4BCKA,SAASC,IACP,MAAMC,EAAM,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMC,EAAU,GAChB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAQE,KAAK,GAEfJ,EAAII,KAAKF,EACX,CACA,OAAOF,CACT,C,iBAEA,QArBkB,CAChBK,MAAO,EACPC,WAAY,GACZC,iBAAiB,GACjBC,KAAMT,IACNU,UAAUV,KCIZ,SAASW,IACP,MAAMC,EAASC,KAAKC,MAAsB,EAAhBD,KAAKD,SAAe,GACxCX,EAAMc,MAAM,IAAIC,KAAK,GAC3B,GAAoB,EAAhBH,KAAKD,SAAe,EACtB,IAAK,IAAIV,EAAI,EAAGA,EAAIU,EAAQV,IAC1BD,EAAIC,GAAK,OAIX,IAAK,IAAIA,EAAI,EAAEE,EAAE,EAAGF,EAAIU,EAAQV,IAAIE,GAAG,EACrCH,EAAIG,GAAK,EAIb,OAAOH,CACT,CACA,QAzBA,SAAuBgB,GACrB,MAAMC,EAAM,GACZ,IAAK,IAAIhB,EAAI,EAAGA,EAAIe,EAAGf,IAAK,CAC1B,MAAMD,EAAMU,IACZO,EAAIb,KAAKJ,EACX,CACA,OAAOiB,CACT,ECKA,QARA,WACE,MAAMT,EAAOhB,SAASC,cAAc,mBACpC,aAAuB,EAAc,SACrC,mBAA6B,EAAc,SCJ7C,SAAoBe,GAClB,IAAK,IAAIP,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMe,EAAU1B,SAAS2B,cAAc,OACvCD,EAAQE,UAAY,oBACpBF,EAAQG,GAAK,IAAMpB,EAAIE,EACvBe,EAAQI,iBAAiB,aAAcC,GACvCL,EAAQI,iBAAiB,QAASC,GAClCL,EAAQI,iBAAiB,aAAcE,GACvChB,EAAKiB,OAAOP,EACd,CAGF,SAASK,EAAWG,GAClB,MACMC,EADSD,EAAEE,OACIP,GAAGQ,MAAM,GACxBC,EAAO,GACb,IAAK,IAAI7B,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMe,EAAUV,EAAKf,cACnB,OAASkC,EAAM,GAAK1B,KAAO0B,EAAM,GAAKxB,IAExC2B,EAAK1B,KAAKc,EACZ,CAEY,SAAVQ,EAAEK,KAWR,SAAmBD,GACjB,MAAME,EAWN,SAAqBF,GACnB,IAAIG,GAAS,EAYb,OAXAH,EAAKnC,SAAQ,CAACC,EAAKK,KACjB,GAAkC,GAA9B,gBAAwBA,GAAS,CACnC,IAAKL,EAEH,OADAqC,GAAS,EACFA,EAEmC,GAAxC,OAAerC,EAAIyB,GAAG,IAAIzB,EAAIyB,GAAG,MACnCY,GAAS,EAEb,KAEKA,CACT,CAzBaC,CAAYJ,GACpBE,IAELF,EAAKnC,SAAQ,CAACC,EAAKK,KACiB,GAA9B,gBAAwBA,KAC1BL,EAAIuC,aAAa,iBAAkB,QACnC,OAAevC,EAAIyB,GAAG,IAAIzB,EAAIyB,GAAG,IAAM,EACzC,IAEF,qBAiBF,CArCIe,CAAUN,GAuCd,SAAmBA,GACjBA,EAAKnC,SAAQ,CAACC,EAAKK,KACiB,GAA9B,gBAAwBA,IACtBL,GAAKA,EAAIC,UAAUC,IAAI,YAC7B,GAEJ,CA3CIuC,CAAUP,GAGuB,GAA/B,qBACFQ,GAEJ,CAsCA,SAASd,IACM,IAAIhB,EAAK+B,UACjB5C,SAASC,IACPA,EAAI4C,aAAa,mBACpB5C,EAAIC,UAAU4C,OAAO,YAAY,GAEvC,CACF,CD1EEC,CAAWlC,GC4Eb,WACE,IAAK,MAAMmC,KAAkB,mBAA4B,CACvD,MAAMhC,EACJ,GAAKC,KAAKC,MAAsB,EAAhBD,KAAKD,UAAgBC,KAAKC,MAAsB,EAAhBD,KAAKD,UACjDiC,EAAM,GACZ,IAAK,IAAI3C,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMkB,EAAK,KAAOV,EAAO,GAAKV,KAAOU,EAAO,GAAKR,GACjDyC,EAAIxC,KAAKiB,EACX,CAEFuB,EAAIjD,SAAQ,CAAC0B,EAAIpB,KACU,GAArB0C,EAAe1C,KACjB,YAAoBoB,EAAG,IAAIA,EAAG,IAAM,EACtC,GAEJ,CACF,CD5FEwB,EACF,EERMC,EAAY,GAClB,IAAIC,EAAc,GAYlB,SAASC,EAASC,GAChB,MAAMC,EAAcC,EAAaC,OAAOH,EAAO,IAAIA,EAAO,IACrDC,EAAYG,KAAQH,EAAYI,OAOvC,SAAqBL,GACnB,MAAMhC,EAAM,GACNsC,EAmBR,SAA4BN,GAC1B,MAAMO,EAAUP,EAAO,GACjBQ,EAAUR,EAAO,GACvB,IAAIhC,EAAMH,MAAM,GAAGC,KAAK,MAUxB,OATAE,EAAI,IAAMuC,EAAU,EAAI,GAAKC,EAC7BxC,EAAI,IAAMuC,EAAU,EAAI,GAAKC,EAC7BxC,EAAI,IAAMuC,EAAU,KAAOC,EAAU,GACrCxC,EAAI,IAAMuC,EAAU,KAAOC,EAAU,GACrCxC,EAAMA,EAAIyC,KAAKT,GACTA,EAAOU,OAAS,GAChBV,EAAO,GAAK,GAAKA,EAAO,GAAK,EADH,KAEvBA,IAEFhC,CACT,CAjC0B2C,CAAmBX,GAC3C,IAAK,IAAIA,KAAUM,EAAiB,CAClC,IAAKN,EAAQ,MACOE,EAAaC,OAAOH,EAAO,IAAIA,EAAO,IACzCI,KACfpC,EAAIb,KAAK6C,EAAO,GAAK,GAAKA,EAAO,GAErC,EAIF,SAAsBrB,EAAQiC,GAC5B,IAAK,MAAMZ,KAAUY,EACdjC,EAAOkC,SAASb,IACnBrB,EAAOxB,KAAK6C,EAGlB,CATEc,CAAahB,EAAa9B,EAC5B,CAjBI+C,CAAYf,GAEdC,EAAYG,IAAM,EAClBP,EAAU1C,KAAK6C,EACjB,CA8CA,SAASgB,IACP,OAAOrD,KAAKC,MAAsB,EAAhBD,KAAKD,UAAgB,GAAKC,KAAKC,MAAsB,EAAhBD,KAAKD,SAC9D,CC/CA,SAASuD,IACP,MAAMC,EAAeC,EAASjB,EAAakB,OACrCC,EAAcF,EAASjB,EAAaC,QAS1C,OAPIe,IACFhB,EAAaoB,OAAS,UAEpBD,IACFnB,EAAaoB,OAAS,SAGjBJ,GAAgBG,GAAe,KAEtC,SAASF,EAAS5D,GAChB,IAAIyB,GAAS,EACb,IAAK,IAAIjC,KAAOQ,EACd,IAAK,IAAIgE,KAAOxE,EACG,GAAbwE,EAAIlB,OAAyB,GAAXkB,EAAInB,MACxBpB,GAAS,GAIf,OAAOA,CACT,CACF,CAEA,QA9CA,SAAmBP,GACjB,GAAIyB,EAAaoB,OAEf,YADAE,IAGF,MAAM7C,EAASF,EAAEE,QACV3B,EAAGE,GAAKyB,EAAOY,aAAa,YAAYkC,MAAM,IAC/CC,EAAUxB,EAAakB,MAAMpE,GAAGE,GAAGkD,IACzCF,EAAakB,MAAMpE,GAAGE,GAAGkD,KAAM,EAE3Ba,KAAkBS,IDPI,GAAtB5B,EAAYY,OAEdX,EAqDJ,WACE,IAAIC,EAASgB,IACb,KAAOnB,EAAUgB,SAASb,IACxBA,EAASgB,IAEX,OAAOhB,CACT,CA5DmB2B,IAIf5B,EADoBD,EAAY8B,OCSlCX,KALEO,GAOJ,ECTA,SAASK,EAAWlD,GAChB,MAAMpB,EAAa,UAARoB,EAAiBuB,EAAaC,OAAOD,EAAakB,MAC7D,IAAIU,EAAO,EACX,IAAI,MAAM/E,KAAOQ,EACb,IAAI,MAAMU,KAAWlB,EACbkB,EAAQmC,KAAQnC,EAAQoC,OACxByB,IAIZ,OAAOA,CACX,CAEA,MCtBM5B,EAAe,CACnBC,OAAQ,GACRiB,MAAO,GACPE,OAAQ,MAGV,SAASE,IAEP,MAAMO,EAAgBxF,SAASC,cAAc,kBACvCwF,EAAazF,SAASC,cAAc,iBACpCgB,EAAYjB,SAASC,cAAc,gBAGzCwF,EAAWC,UAAY,GACvBzE,EAAUyE,UAAY,GACtBC,EAAgBF,EAAY9B,EAAaC,QACzC+B,EAAgB1E,EAAW0C,EAAakB,MAAO,SAC5ClB,EAAaoB,SAQlB,SAAqB9D,GACA,IAAIA,EAAUf,iBAAiB,kBACrCC,SAAQC,GAAKA,EAAIC,UAAU4C,OAAO,iBACjD,CATI2C,CAAY3E,GAWhB,SAA4B4E,EAAQd,GAClCc,EAAQxF,UAAUyF,OAAO,UACzB,MAAMC,EAAKF,EAAQ5F,cAAc,gBAC3B+F,EAAOH,EAAQ5F,cAAc,WACnC8F,EAAKE,YAAY,GAAGlB,aACpBiB,EAAOlE,iBAAiB,SAASI,IAC/BA,EAAEgE,iBACFC,SAASH,QAAQ,GAErB,CAnBII,CAAmBZ,EAAc7B,EAAaoB,SDrBlD,WACI,MAAMsB,EAAgBrG,SAASC,cAAc,kBACvCqG,EAAetG,SAASC,cAAc,iBAEtCsG,EAAajB,EAAW,UACxBkB,EAAYlB,EAAW,SAC7Be,EAAgBJ,YAAYM,EAC5BD,EAAeL,YAAYO,CAC/B,CCeE,EACF,CAkBA,SAASb,EAAgBc,EAAMjG,EAAK+B,GAClC,IAAK,IAAI9B,EAAI,EAAGA,EAAID,EAAI2D,OAAQ1D,IAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIH,EAAIC,GAAG0D,OAAQxD,IAAK,CACtC,MAAMe,EAAU1B,SAAS2B,cAAc,OACvCD,EAAQrB,UAAUC,IAAI,iBACjBE,EAAIC,GAAGE,GAAGmD,QACbpC,EAAQrB,UAAUC,IAAI,aAClBE,EAAIC,GAAGE,GAAGkD,KACZnC,EAAQrB,UAAUC,IAAI,aAGtBE,EAAIC,GAAGE,GAAGkD,KAAOrD,EAAIC,GAAGE,GAAGmD,OAC7BpC,EAAQrB,UAAUC,IAAI,aAGZ,SAARiC,GAEFb,EAAQI,iBAAiB,QAAS,GAClCJ,EAAQiB,aAAa,WAAYlC,EAAI,GAAKE,GACtB,GAAjBH,EAAIC,GAAGE,GAAGmD,OACXpC,EAAQrB,UAAUC,IAAI,iBAMxBoB,EAAQiB,aAAa,cAAelC,EAAI,GAAKE,GAI/C8F,EAAKxE,OAAOP,EACd,CAIJ,CCjEA,SAASgF,EAAQlG,GACf,MAAMiB,EAWR,SAAsBkF,GACpB,MAAMlF,EAAM,GACZ,IAAK,IAAIhB,EAAI,EAAGA,EAbS,EAaAA,IAAK,CAC5B,MAAMmG,EAAO,GACb,IAAK,IAAIjG,EAAI,EAAGA,EAfO,EAeEA,IAAK,CAC5B,MAAMqE,EAAM,CACZA,KAAU,EACVA,OAAY,GACZ4B,EAAKhG,KAAKoE,EACZ,CACAvD,EAAIb,KAAKgG,EACX,CACA,OAAOnF,CACT,CAxBcoF,GACZ,IAAK,IAAIpG,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IACL,GAAXH,EAAIC,GAAGE,KACNc,EAAIhB,GAAGE,GAAGmD,OAAM,GAI1B,OAAOrC,CACT,C,OClBA,MAAMqF,EAAS9G,SAASC,cAAc,cAChC8G,EAAY/G,SAASC,cAAc,eACnC+G,EAAchH,SAASC,cAAc,gBACrCgH,EAAmBjH,SAASC,cAAc,cAiBhD,SAAS6C,IDvBT,IAK8BoE,ECmB1BF,EAAc3G,UAAUyF,OAAO,UAC/BmB,EAAmB5G,UAAUyF,OAAO,UDpBVoB,EAJP,EAKrBvD,EAAaC,OAAS8C,EAAQQ,EAAUlG,MACxC2C,EAAakB,MAAQ6B,EAAQQ,EAAUjG,WACvC0C,EAAawD,YAAcD,EAAUrG,MACrC8C,EAAayD,WAAaF,EAAUrG,MAPpCoE,GCyBF,CAnBA6B,EAAShF,iBAAiB,UAE1B,SAAwBI,GACpBA,EAAEgE,iBACF,MAAMmB,EAAWnF,EAAEE,OAAOvB,MAAMyG,MAChC,QAAgBD,EAKhBN,EAAY1G,UAAUyF,OAAO,UAC7BkB,EAAc3G,UAAUyF,OAAO,UAC/B,GALJ,G","sources":["webpack://battleship/./src/components/modules/misc/cheat.js","webpack://battleship/./src/components/modules/state/initState.js","webpack://battleship/./src/components/modules/ship-selection/generateShips.js","webpack://battleship/./src/components/modules/ship-selection/deploy.js","webpack://battleship/./src/components/modules/ship-selection/createGrid.js","webpack://battleship/./src/components/modules/main/playEnemyRound.js","webpack://battleship/./src/components/modules/main/playRound.js","webpack://battleship/./src/components/modules/state/renderInfo.js","webpack://battleship/./src/components/modules/state/battleground.js","webpack://battleship/./src/components/modules/main/mainGame.js","webpack://battleship/./src/index.js"],"sourcesContent":["window.cheat=function(){\n    const enemyGrid=document.querySelector('#enemy-field');\n    const hiddenDivs=[...enemyGrid.querySelectorAll('.enemy-hidden')];\n    hiddenDivs.forEach(div=>div.classList.add('enemy-cheat'))\n}\n","const initState = {\n  ships: 0,\n  structures: [],\n  enemyStrucutures:[],\n  grid: generateGrid(),\n  enemyGrid:generateGrid(),\n  \n};\n\nfunction generateGrid() {\n  const arr = [];\n  for (let i = 0; i < 9; i++) {\n    const tempArr = [];\n    for (let j = 0; j < 9; j++) {\n      tempArr.push(0);\n    }\n    arr.push(tempArr);\n  }\n  return arr;\n}\n\nexport default initState;\n","function generateShips(n) {\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    const arr = createRandomShip();\n    res.push(arr);\n  }\n  return res;\n}\n\nfunction createRandomShip() {\n  const random = Math.trunc(Math.random() * 3 + 2);\n  const arr = Array(16).fill(0);\n  if (Math.random() * 2 > 1) {\n    for (let i = 0; i < random; i++) {\n      arr[i] = 1;\n    }\n  }\n  else{\n    for (let i = 0,j=0; i < random; i++,j+=4) {\n      arr[j] = 1;\n    }\n  }\n\n  return arr;\n}\nexport default generateShips;\n","import initState from '../state/initState';\nimport generateShips from './generateShips';\nimport { createGrid, createEnemyGrid } from './createGrid';\n\nfunction deploy() {\n  const grid = document.querySelector('#selection-grid');\n  initState.structures = generateShips(initState.ships);\n  initState.enemyStrucutures = generateShips(initState.ships);\n  createGrid(grid);\n  createEnemyGrid();\n}\n\nexport default deploy;\n","import { rendermainGameScreen } from '../../../index';\nimport initState from '../state/initState';\n\nfunction createGrid(grid) {\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      const element = document.createElement('div');\n      element.className = 'selection-element';\n      element.id = 'E' + i + j;\n      element.addEventListener('mouseenter', handleMove);\n      element.addEventListener('click', handleMove);\n      element.addEventListener('mouseleave', unhighlight);\n      grid.append(element);\n    }\n  }\n\n  function handleMove(e) {\n    const target = e.target;\n    const start = target.id.slice(1);\n    const divs = [];\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const element = grid.querySelector(\n          '#E' + (+start[0] + i) + (+start[1] + j)\n        );\n        divs.push(element);\n      }\n    }\n    if (e.type == 'click') {\n      storeShip(divs);\n    } else {\n      highLight(divs);\n    }\n\n    if (initState.structures.length == 0) {\n      rendermainGameScreen();\n    }\n  }\n\n  function storeShip(divs) {\n    const move = isLegalMove(divs);\n    if (!move) return;\n\n    divs.forEach((div, i) => {\n      if (initState.structures[0][i] == 1) {\n        div.setAttribute('data-permanent', 'true');\n        initState.grid[div.id[1]][div.id[2]] = 1;\n      }\n    });\n    initState.structures.shift();\n\n    function isLegalMove(divs) {\n      let result = true;\n      divs.forEach((div, i) => {\n        if (initState.structures[0][i] == 1) {\n          if (!div) {\n            result = false;\n            return result;\n          }\n          if (initState.grid[div.id[1]][div.id[2]] == 1) {\n            result = false;\n          }\n        }\n      });\n      return result;\n    }\n  }\n\n  function highLight(divs) {\n    divs.forEach((div, i) => {\n      if (initState.structures[0][i] == 1) {\n        if (div) div.classList.add('highlight');\n      }\n    });\n  }\n  function unhighlight() {\n    const divs = [...grid.children];\n    divs.forEach((div) => {\n      if (!div.getAttribute('data-permanent'))\n        div.classList.remove('highlight');\n    });\n  }\n}\n\nfunction createEnemyGrid() {\n  for (const enemyStructure of initState.enemyStrucutures) {\n    const random =\n      '' + Math.trunc(Math.random() * 5) + Math.trunc(Math.random() * 5);\n    const ids = [];\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const id = '' + (+random[0] + i) + (+random[1] + j);\n        ids.push(id);\n      }\n    }\n    ids.forEach((id, i) => {\n      if (enemyStructure[i] == 1) {\n        initState.enemyGrid[id[0]][id[1]] = 1;\n      }\n    });\n  }\n}\n\nexport { createEnemyGrid, createGrid };\n","import { battleGround } from '../state/battleground';\n\nconst madeMoves = [];\nlet movesToMake = [];\n\nfunction playEnemyRound() {\n  if (movesToMake.length == 0) {\n    const random = getRandomMove();\n    makeMove(random);\n  } else {\n    const lastElement = movesToMake.pop();\n    makeMove(lastElement);\n  }\n}\n\nfunction makeMove(number) {\n  const gridElement = battleGround.player[number[0]][number[1]];\n  if (!gridElement.hit && !gridElement.empty) {\n    createMoves(number);\n  }\n  gridElement.hit = 1;\n  madeMoves.push(number);\n}\n\nfunction createMoves(number) {\n  const res = [];\n  const adjacentNumbers = getAdjacentNumbers(number);\n  for (let number of adjacentNumbers) {\n    if (!number) break;\n    const gridElement = battleGround.player[number[0]][number[1]];\n    if (!gridElement.hit) {\n      res.push(number[0] + '' + number[1]);\n    }\n  }\n  appendUnique(movesToMake, res);\n}\n\nfunction appendUnique(target, source) {\n  for (const number of source) {\n    if (!target.includes(number)) {\n      target.push(number);\n    }\n  }\n}\n\nfunction getAdjacentNumbers(number) {\n  const number1 = number[0];\n  const number2 = number[1];\n  let res = Array(4).fill(null);\n  res[0] = +number1 - 1 + '' + number2;\n  res[1] = +number1 + 1 + '' + number2;\n  res[2] = +number1 + '' + (+number2 - 1);\n  res[3] = +number1 + '' + (+number2 + 1);\n  res = res.map((number) => {\n    if (number.length > 2) return null;\n    if (number[0] > 8 || number[1] > 8) return null;\n    return number;\n  });\n  return res;\n}\n\nfunction getRandomMove() {\n  let number = randomNumber();\n  while (madeMoves.includes(number)) {\n    number = randomNumber();\n  }\n  return number;\n}\nfunction randomNumber() {\n  return Math.trunc(Math.random() * 9) + '' + Math.trunc(Math.random() * 9);\n}\nexport default playEnemyRound;\n","import { battleGround, render } from '../state/battleground';\nimport playEnemyRound from './playEnemyRound';\n\nfunction playRound(e) {\n  if (battleGround.winner) {\n    render();\n    return;\n  }\n  const target = e.target;\n  const [i, j] = target.getAttribute('data-tag').split('');\n  const hitStatus=battleGround.enemy[i][j].hit;\n  battleGround.enemy[i][j].hit = true;\n\n  if (updateWinner() || hitStatus) {\n    render();\n    return;\n  }\n\n  playEnemyRound();\n  updateWinner();\n  render();\n}\n\nfunction updateWinner() {\n  const playerResult = checkALL(battleGround.enemy);\n  const enemyResult = checkALL(battleGround.player);\n\n  if (playerResult) {\n    battleGround.winner = 'Player';\n  }\n  if (enemyResult) {\n    battleGround.winner = 'Enemy';\n  }\n\n  return playerResult || enemyResult || null;\n\n  function checkALL(grid) {\n    let result = true;\n    for (let arr of grid) {\n      for (let obj of arr) {\n        if (obj.empty == 0 && obj.hit == 0) {\n          result = false;\n        }\n      }\n    }\n    return result;\n  }\n}\n\nexport default playRound;\n","import {battleGround} from './battleground';\n\nfunction renderInfo(){\n    const playerChunksDiv=document.querySelector('#player-chunks');\n    const enemyChunksDiv=document.querySelector('#enemy-chunks');\n\n    const playerChunks=findChunks('player');\n    const enemyChunks=findChunks('enemy');\n    playerChunksDiv.textContent=playerChunks;\n    enemyChunksDiv.textContent=enemyChunks;\n}\n\nfunction findChunks(target){\n    const grid=target=='player'?battleGround.player:battleGround.enemy;\n    let chunks=0;\n    for(const arr of grid){\n        for(const element of arr){\n            if(!element.hit && !element.empty){\n                chunks++;\n            }\n        } \n    }\n    return chunks;\n}\n\nexport default renderInfo;","import playRound from '../main/playRound';\nimport renderInfo from './renderInfo';\n\nconst battleGround = {\n  player: [],\n  enemy: [],\n  winner: null,\n};\n\nfunction render() {\n  // const gameHeading = document.querySelector('#game-heading');\n  const winnerSection = document.querySelector('#winner-screen');\n  const playerGrid = document.querySelector('#player-field');\n  const enemyGrid = document.querySelector('#enemy-field');\n\n  // gameHeading.textContent = 'Strike the Enemy!';\n  playerGrid.innerHTML = '';\n  enemyGrid.innerHTML = '';\n  generateDOMGrid(playerGrid, battleGround.player);\n  generateDOMGrid(enemyGrid, battleGround.enemy, 'enemy');\n  if(battleGround.winner){\n    // gameHeading.textContent=`${battleGround.winner} Won!`;\n    unhideEnemy(enemyGrid);\n    renderWinnerScreen(winnerSection,battleGround.winner)\n  }\n  renderInfo();\n}\n\nfunction unhideEnemy(enemyGrid){\n    const hiddenDivs=[...enemyGrid.querySelectorAll('.enemy-hidden')];\n    hiddenDivs.forEach(div=>div.classList.remove('enemy-hidden'))\n}\n\nfunction renderWinnerScreen(section,winner){\n  section.classList.toggle('hidden');\n  const info=section.querySelector('#winner-info');\n  const reload=section.querySelector('#reload');\n  info.textContent=`${winner} has Won!`;\n  reload.addEventListener('click',(e)=>{\n    e.preventDefault();\n    location.reload();\n  })\n}\n\nfunction generateDOMGrid(node, arr, type) {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      const element = document.createElement('div');\n      element.classList.add('field-element');\n      if (!arr[i][j].empty) {\n        element.classList.add('ship-part');\n        if (arr[i][j].hit) {\n          element.classList.add('ship-hit');\n        }\n      }\n      if (arr[i][j].hit && arr[i][j].empty) {\n        element.classList.add('empty-hit');\n      }\n\n      if (type == 'enemy') {\n        // element.classList.add('enemy-hidden');\n        element.addEventListener('click', playRound);\n        element.setAttribute('data-tag', i + '' + j);\n        if(arr[i][j].empty==0){\n          element.classList.add('enemy-hidden');\n        }\n        \n       \n      }\n      else{\n        element.setAttribute('data-player', i + '' + j);\n\n      }\n\n      node.append(element);\n    }\n  }\n\n  \n}\n\nexport { battleGround, render };\n","import initState from '../state/initState';\nimport {battleGround, render} from '../state/battleground';\n\nfunction mainGame() {\n  geneRateBattleGround(initState);\n  render();\n}\n\nfunction geneRateBattleGround(initState) {\n  battleGround.player = getGrid(initState.grid);\n  battleGround.enemy = getGrid(initState.enemyGrid);\n  battleGround.playerShips = initState.ships;\n  battleGround.enemyShips = initState.ships;\n}\nfunction getGrid(arr) {\n  const res = getEmptygrid(9);\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n        if(arr[i][j]==1){\n            res[i][j].empty=false;\n        }\n    }\n  }\n  return res;\n}\n\nfunction getEmptygrid(num) {\n  const res = [];\n  for (let i = 0; i < num; i++) {\n    const temp = [];\n    for (let j = 0; j < num; j++) {\n      const obj = {};\n      obj.hit = false;\n      obj.empty = true;\n      temp.push(obj);\n    }\n    res.push(temp);\n  }\n  return res;\n}\nexport default mainGame;\n","import './components/styles/style';\nimport initState from './components/modules/state/initState';\nimport deploy from './components/modules/ship-selection/deploy';\nimport mainGame from './components/modules/main/mainGame';\nimport '../src/components/modules/misc/cheat'\n\nconst shipForm=document.querySelector('#ship-form');\nconst menuSection=document.querySelector('#start-menu');\nconst deploySection=document.querySelector('#deploy-menu');\nconst mainGameGameScreen=document.querySelector('#main-game');\n\nshipForm.addEventListener('submit',storeShipInput);\n\nfunction storeShipInput(e){\n    e.preventDefault();\n    const shipNumber=e.target.ships.value;\n    initState.ships=shipNumber;\n    renderDeployScreen();\n}\n\nfunction renderDeployScreen() {\n    menuSection.classList.toggle('hidden');\n    deploySection.classList.toggle('hidden');\n    deploy();\n}\n\nfunction rendermainGameScreen() {\n    deploySection.classList.toggle('hidden');\n    mainGameGameScreen.classList.toggle('hidden');\n    mainGame();\n}\n\nexport {rendermainGameScreen}"],"names":["window","cheat","document","querySelector","querySelectorAll","forEach","div","classList","add","generateGrid","arr","i","tempArr","j","push","ships","structures","enemyStrucutures","grid","enemyGrid","createRandomShip","random","Math","trunc","Array","fill","n","res","element","createElement","className","id","addEventListener","handleMove","unhighlight","append","e","start","target","slice","divs","type","move","result","isLegalMove","setAttribute","storeShip","highLight","rendermainGameScreen","children","getAttribute","remove","createGrid","enemyStructure","ids","createEnemyGrid","madeMoves","movesToMake","makeMove","number","gridElement","battleGround","player","hit","empty","adjacentNumbers","number1","number2","map","length","getAdjacentNumbers","source","includes","appendUnique","createMoves","randomNumber","updateWinner","playerResult","checkALL","enemy","enemyResult","winner","obj","render","split","hitStatus","getRandomMove","pop","findChunks","chunks","winnerSection","playerGrid","innerHTML","generateDOMGrid","unhideEnemy","section","toggle","info","reload","textContent","preventDefault","location","renderWinnerScreen","playerChunksDiv","enemyChunksDiv","playerChunks","enemyChunks","node","getGrid","num","temp","getEmptygrid","shipForm","menuSection","deploySection","mainGameGameScreen","initState","playerShips","enemyShips","shipNumber","value"],"sourceRoot":""}